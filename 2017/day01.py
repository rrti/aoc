def calc_string_sum(string, offset):
	s = 0
	i = 0
	n = len(string)
	## splitting into two loops avoids the modulo and saves ~0.0009ms
	## ("string += string" would also avoid it but is more expensive)
	m = n - offset

	"""
	## "for i in xrange(n)" is ~0.0002s faster than "while (i < n)"
	for i in xrange(n):
		j = (i + offset) % n

		## fastest; ~0.0010s
		## j = i + offset
		##
		## slowest; ~0.0013s vs ~0.0011s
		## j = i + offset
		## j = j - n * (j >= n)
		##
		d = ord(string[i]) - ord('0')
		s += (d * (string[i] == string[j]))

	return s
	"""


	for i in xrange(0, m):
		j = i + offset
		d = ord(string[i]) - ord('0')
		s += (d * (string[i] == string[j]))

	j = 0

	for i in xrange(m, n):
		d = ord(string[i]) - ord('0')
		s += (d * (string[i] == string[j]))
		j += 1

	return s


REAL_STRINGS = ["892195969991735837915273868729548694237967495115412399373194562526947585337233793568278265279199883197167634791293177986152566236718332617536487236879747167999983363832257912445756887314879229925864477761357139855548522513798899853896612387146687716264599943289416326727256525173953861534244979466587895429399159924916364476319573895566795393368411672387263615582128377676293612892723762237191146714286233543514411813323197995953854871628225358543514157867372265718724276911699514971458844849349726276329135118243155698271218844347387457343656446381799296893222256198484465873714311777937421161581798189554141474236239447612421883232173914183732126332838194648583472419154369952477422666389517569944428464617457124369349242479612422673241361777576466946622932243728551273284837934497511114334421486262244982914734452113946361245377351849815584855691778894798219822463298387771923329337634394654439458564233259451453345316753241438267739439225497515276522424441532462541528195782818326918562247278496495764435386667383577543385186827269732261223156824351164841648424564925198783625721396988984481558391866483955533972212164693898955412719161648411279149413443192896864258215498543827458438871355879336892721675937111952479183496982825163456282747678364612135596373533447719867384667516572262124225585623974278833981365494628646614588114147473559138853453189448624976774641922469183942857695986376428944876851497914443873513862319484181787593572987444669767939526294424531262999564948571142342741129862311311313166798363442745792896227642881893134498151552326647933689596516859342242244584714818773791567187322217164347852843751875979415198165627534263527828414549217234322361937785185174993256753483876378332521824515977173397535784236923629636713469151526399149548322849831431526219478653861754364155275865511643923249858589466142474763778413826829226663398467569555747267195129525138917561785436449855933951538973995881954521124753369223898312843734771532342383282987422334196585128526526324291777689689492346231786335851551413876834969878"]
TEST_STRINGS = [
	"1122",
	"1111",
	"1234",
	"91212129",

	"1212",
	"1221",
	"123425",
	"123123",
	"12131415",
]

assert(calc_string_sum(TEST_STRINGS[0], 1) ==    3)
assert(calc_string_sum(TEST_STRINGS[1], 1) ==    4)
assert(calc_string_sum(TEST_STRINGS[2], 1) ==    0)
assert(calc_string_sum(TEST_STRINGS[3], 1) ==    9)
assert(calc_string_sum(REAL_STRINGS[0], 1) == 1047) ## part 1

assert(calc_string_sum(TEST_STRINGS[4], len(TEST_STRINGS[4]) / 2) ==   6)
assert(calc_string_sum(TEST_STRINGS[5], len(TEST_STRINGS[5]) / 2) ==   0)
assert(calc_string_sum(TEST_STRINGS[6], len(TEST_STRINGS[6]) / 2) ==   4)
assert(calc_string_sum(TEST_STRINGS[7], len(TEST_STRINGS[7]) / 2) ==  12)
assert(calc_string_sum(TEST_STRINGS[8], len(TEST_STRINGS[8]) / 2) ==   4)
assert(calc_string_sum(REAL_STRINGS[0], len(REAL_STRINGS[0]) / 2) == 982) ## part 2

